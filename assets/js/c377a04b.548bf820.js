"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[971],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>N});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),m=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=m(e.components);return r.createElement(p.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},s=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=m(t),s=a,N=c["".concat(p,".").concat(s)]||c[s]||u[s]||o;return t?r.createElement(N,l(l({ref:n},d),{},{components:t})):r.createElement(N,l({ref:n},d))}));function N(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=s;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[c]="string"==typeof e?e:a,l[1]=i;for(var m=2;m<o;m++)l[m]=t[m];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}s.displayName="MDXCreateElement"},1269:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>m});var r=t(7462),a=(t(7294),t(3905));const o={},l="Angular Renderer for Contentful Rich Text",i={unversionedId:"index",id:"index",title:"Angular Renderer for Contentful Rich Text",description:"Installation",source:"@site/docs/index.md",sourceDirName:".",slug:"/",permalink:"/ngx-contentful-rich-text/docs/",draft:!1,editUrl:"https://github.com/kgajera/ngx-contentful-rich-text/tree/main/website/docs/index.md",tags:[],version:"current",frontMatter:{}},p={},m=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2}],d={toc:m};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"angular-renderer-for-contentful-rich-text"},"Angular Renderer for Contentful Rich Text"),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"Install the package with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install ngx-contentful-rich-text --save\n# or\nyarn add ngx-contentful-rich-text\n")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"Import ",(0,a.kt)("inlineCode",{parentName:"p"},"NgxContentfulRichTextModule")," in your module:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { NgxContentfulRichTextModule } from 'ngx-contentful-rich-text';\n\n@NgModule({\n  imports: [NgxContentfulRichTextModule],\n})\nexport class AppModule {}\n")),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"NgxContentfulRichTextComponent")," in your template with the ",(0,a.kt)("inlineCode",{parentName:"p"},"document")," input:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Component } from '@angular/core';\nimport { Document } from '@contentful/rich-text-types';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <ngx-contentful-rich-text [document]=\"document\"></ngx-contentful-rich-text>\n  `,\n})\nexport class AppComponent {\n  document: Document = {\n    nodeType: BLOCKS.DOCUMENT,\n    data: {},\n    content: [\n      {\n        nodeType: BLOCKS.PARAGRAPH,\n        data: {},\n        content: [\n          {\n            nodeType: 'text',\n            data: {},\n            value: 'Hello World',\n            marks: [{ type: 'bold' }],\n          },\n        ],\n      },\n    ],\n  };\n}\n")),(0,a.kt)("p",null,"You can also pass custom renderer components for both nodes and marks using the ",(0,a.kt)("inlineCode",{parentName:"p"},"nodeRenderers")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"markRenderers")," optional inputs respectively like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Component } from '@angular/core';\nimport { BLOCKS, MARKS, Document } from '@contentful/rich-text-types';\nimport {\n  CHILDREN,\n  TEXT,\n  MarkRenderer,\n  MarkRendererResolver,\n  NodeRenderer,\n  NodeRendererResolver,\n} from 'ngx-contentful-rich-text';\n\n@Component({\n  template: `\n    <p class=\"bold\">${TEXT}</p>\n  `,\n})\nexport class CustomBoldComponent extends MarkRenderer {}\n\n@Component({\n  template: `\n    <p class=\"text-center\">${CHILDREN}</p>\n  `,\n})\nexport class CustomParagraphComponent extends NodeRenderer {}\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <ngx-contentful-rich-text\n      [document]=\"document\"\n      [nodeRenderers]=\"nodeRenderers\"\n      [markRenderers]=\"markRenderers\"\n    >\n    </ngx-contentful-rich-text>\n  `,\n})\nexport class AppComponent {\n  nodeRenderers: Record<string, NodeRendererResolver> = {\n    [BLOCKS.PARAGRAPH]: CustomParagraphComponent,\n  };\n  markRenderers: Record<string, MarkRendererResolver> = {\n    [MARKS.BOLD]: CustomBoldComponent,\n  };\n\n  document: Document = {\n    nodeType: BLOCKS.DOCUMENT,\n    data: {},\n    content: [\n      {\n        nodeType: BLOCKS.PARAGRAPH,\n        data: {},\n        content: [\n          {\n            nodeType: 'text',\n            data: {},\n            value: 'Hello World',\n            marks: [{ type: 'bold' }],\n          },\n        ],\n      },\n    ],\n  };\n}\n")),(0,a.kt)("p",null,"Last, but not least, you can pass a custom rendering component for an embedded entry:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Component, OnInit } from '@angular/core';\nimport { BLOCKS, Document } from '@contentful/rich-text-types';\nimport { NodeRenderer, NodeRendererResolver } from 'ngx-contentful-rich-text';\n\n@Component({\n  template: `<div>{{ fields.title }}</div>`\n})\nexport class CustomEmbeddedEntryComponent extends NodeRenderer implements OnInit {\n  fields: any;\n\n  ngOnInit() {\n    this.fields = this.node.data.target.fields;\n  }\n}\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <ngx-contentful-rich-text\n      [document]=\"document\"\n      [nodeRenderers]=\"nodeRenderers\">\n    </ngx-contentful-rich-text>\n  `,\n})\nexport class AppComponent {\n  nodeRenderers: Record<string, NodeRendererResolver> = {\n    [BLOCKS.EMBEDDED_ENTRY]: (node) => CustomEmbeddedEntryComponent\n  };\n\n  document: Document = {\n    nodeType: BLOCKS.DOCUMENT,\n    data: {},\n    content: [\n      {\n        nodeType: BLOCKS.EMBEDDED_ENTRY,\n        data: {\n          target: (...)Link<'Entry'>(...)\n        },\n        content: [],\n      },\n    ],\n  };\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"nodeRenderers")," keys should be one of the following ",(0,a.kt)("inlineCode",{parentName:"p"},"BLOCKS")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"INLINES")," properties as defined in ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@contentful/rich-text-types"},(0,a.kt)("inlineCode",{parentName:"a"},"@contentful/rich-text-types")),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"BLOCKS")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"DOCUMENT")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"PARAGRAPH")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"HEADING_1")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"HEADING_2")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"HEADING_3")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"HEADING_4")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"HEADING_5")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"HEADING_6")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"UL_LIST")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"OL_LIST")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"LIST_ITEM")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"QUOTE")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"HR")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"EMBEDDED_ENTRY")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"EMBEDDED_ASSET")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"INLINES")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"EMBEDDED_ENTRY")," (this is different from the ",(0,a.kt)("inlineCode",{parentName:"li"},"BLOCKS.EMBEDDED_ENTRY"),")"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"HYPERLINK")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ENTRY_HYPERLINK")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ASSET_HYPERLINK"))))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"markRenderers")," keys should be one of the following ",(0,a.kt)("inlineCode",{parentName:"p"},"MARKS")," properties as defined in ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@contentful/rich-text-types"},(0,a.kt)("inlineCode",{parentName:"a"},"@contentful/rich-text-types")),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"BOLD")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ITALIC")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"UNDERLINE")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"CODE"))))}c.isMDXComponent=!0}}]);